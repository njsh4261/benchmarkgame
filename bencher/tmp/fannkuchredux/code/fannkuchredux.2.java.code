<span class="com">/* The Computer Language Benchmarks Game</span>
<span class="com">   https://salsa.debian.org/benchmarksgame-team/benchmarksgame/</span>
<span class="com"></span>
<span class="com">   contributed by Isaac Gouy</span>
<span class="com">   converted to Java by Oleg Mazurov</span>
<span class="com">*/</span>

<span class="kwa">public class</span> fannkuchredux
<span class="opt">{</span>
   <span class="kwa">public static int</span> <span class="kwd">fannkuch</span><span class="opt">(</span><span class="kwa">int</span> n<span class="opt">) {</span>
      <span class="kwa">int</span><span class="opt">[]</span> perm <span class="opt">=</span> <span class="kwa">new int</span><span class="opt">[</span>n<span class="opt">];</span>
      <span class="kwa">int</span><span class="opt">[]</span> perm1 <span class="opt">=</span> <span class="kwa">new int</span><span class="opt">[</span>n<span class="opt">];</span>
      <span class="kwa">int</span><span class="opt">[]</span> count <span class="opt">=</span> <span class="kwa">new int</span><span class="opt">[</span>n<span class="opt">];</span>
      <span class="kwa">int</span> maxFlipsCount <span class="opt">=</span> <span class="num">0</span><span class="opt">;</span>
      <span class="kwa">int</span> permCount <span class="opt">=</span> <span class="num">0</span><span class="opt">;</span>
      <span class="kwa">int</span> checksum <span class="opt">=</span> <span class="num">0</span><span class="opt">;</span>

      <span class="kwa">for</span><span class="opt">(</span><span class="kwa">int</span> i<span class="opt">=</span><span class="num">0</span><span class="opt">;</span> i<span class="opt">&lt;</span>n<span class="opt">;</span> i<span class="opt">++)</span> perm1<span class="opt">[</span>i<span class="opt">] =</span> i<span class="opt">;</span>
      <span class="kwa">int</span> r <span class="opt">=</span> n<span class="opt">;</span>

      <span class="kwa">while</span> <span class="opt">(</span><span class="kwb">true</span><span class="opt">) {</span>

         <span class="kwa">while</span> <span class="opt">(</span>r <span class="opt">!=</span> <span class="num">1</span><span class="opt">){</span> count<span class="opt">[</span>r<span class="opt">-</span><span class="num">1</span><span class="opt">] =</span> r<span class="opt">;</span> r<span class="opt">--; }</span>

         <span class="kwa">for</span><span class="opt">(</span><span class="kwa">int</span> i<span class="opt">=</span><span class="num">0</span><span class="opt">;</span> i<span class="opt">&lt;</span>n<span class="opt">;</span> i<span class="opt">++)</span> perm<span class="opt">[</span>i<span class="opt">] =</span> perm1<span class="opt">[</span>i<span class="opt">];</span>
         <span class="kwa">int</span> flipsCount <span class="opt">=</span> <span class="num">0</span><span class="opt">;</span>
         <span class="kwa">int</span> k<span class="opt">;</span>

         <span class="kwa">while</span> <span class="opt">( !((</span>k<span class="opt">=</span>perm<span class="opt">[</span><span class="num">0</span><span class="opt">]) ==</span> <span class="num">0</span><span class="opt">) ) {</span>
            <span class="kwa">int</span> k2 <span class="opt">= (</span>k<span class="opt">+</span><span class="num">1</span><span class="opt">) &gt;&gt;</span> <span class="num">1</span><span class="opt">;</span>
            <span class="kwa">for</span><span class="opt">(</span><span class="kwa">int</span> i<span class="opt">=</span><span class="num">0</span><span class="opt">;</span> i<span class="opt">&lt;</span>k2<span class="opt">;</span> i<span class="opt">++) {</span>
               <span class="kwa">int</span> temp <span class="opt">=</span> perm<span class="opt">[</span>i<span class="opt">];</span> perm<span class="opt">[</span>i<span class="opt">] =</span> perm<span class="opt">[</span>k<span class="opt">-</span>i<span class="opt">];</span> perm<span class="opt">[</span>k<span class="opt">-</span>i<span class="opt">] =</span> temp<span class="opt">;</span>
            <span class="opt">}</span>
            flipsCount<span class="opt">++;</span>
         <span class="opt">}</span>

         maxFlipsCount <span class="opt">=</span> Math<span class="opt">.</span><span class="kwd">max</span><span class="opt">(</span>maxFlipsCount<span class="opt">,</span> flipsCount<span class="opt">);</span>
         checksum <span class="opt">+=</span> permCount<span class="opt">%</span><span class="num">2</span> <span class="opt">==</span> <span class="num">0</span> ? flipsCount <span class="opt">: -</span>flipsCount<span class="opt">;</span>

         <span class="slc">// Use incremental change to generate another permutation</span>
         <span class="kwa">while</span> <span class="opt">(</span><span class="kwb">true</span><span class="opt">) {</span>
            <span class="kwa">if</span> <span class="opt">(</span>r <span class="opt">==</span> n<span class="opt">) {</span>
	       System<span class="opt">.</span>out<span class="opt">.</span><span class="kwd">println</span><span class="opt">(</span> checksum <span class="opt">);</span>
	       <span class="kwa">return</span> maxFlipsCount<span class="opt">;</span>
	    <span class="opt">}</span>
            <span class="kwa">int</span> perm0 <span class="opt">=</span> perm1<span class="opt">[</span><span class="num">0</span><span class="opt">];</span>
            <span class="kwa">int</span> i <span class="opt">=</span> <span class="num">0</span><span class="opt">;</span>
            <span class="kwa">while</span> <span class="opt">(</span>i <span class="opt">&lt;</span> r<span class="opt">) {</span>
               <span class="kwa">int</span> j <span class="opt">=</span> i <span class="opt">+</span> <span class="num">1</span><span class="opt">;</span>
               perm1<span class="opt">[</span>i<span class="opt">] =</span> perm1<span class="opt">[</span>j<span class="opt">];</span>
               i <span class="opt">=</span> j<span class="opt">;</span>
            <span class="opt">}</span>
            perm1<span class="opt">[</span>r<span class="opt">] =</span> perm0<span class="opt">;</span>

            count<span class="opt">[</span>r<span class="opt">] =</span> count<span class="opt">[</span>r<span class="opt">] -</span> <span class="num">1</span><span class="opt">;</span>
            <span class="kwa">if</span> <span class="opt">(</span>count<span class="opt">[</span>r<span class="opt">] &gt;</span> <span class="num">0</span><span class="opt">)</span> <span class="kwa">break</span><span class="opt">;</span>
            r<span class="opt">++;</span>
         <span class="opt">}</span>

         permCount<span class="opt">++;</span>
      <span class="opt">}</span>
   <span class="opt">}</span>

   <span class="kwa">public static void</span> <span class="kwd">main</span><span class="opt">(</span>String<span class="opt">[]</span> args<span class="opt">){</span>
      <span class="kwa">int</span> n <span class="opt">=</span> <span class="num">7</span><span class="opt">;</span>
      <span class="kwa">if</span> <span class="opt">(</span>args<span class="opt">.</span>length <span class="opt">&gt;</span> <span class="num">0</span><span class="opt">)</span> n <span class="opt">=</span> Integer<span class="opt">.</span><span class="kwd">parseInt</span><span class="opt">(</span>args<span class="opt">[</span><span class="num">0</span><span class="opt">]);</span>
      System<span class="opt">.</span>out<span class="opt">.</span><span class="kwd">println</span><span class="opt">(</span><span class="str">&quot;Pfannkuchen(&quot;</span><span class="opt">+</span>n<span class="opt">+</span><span class="str">&quot;) = &quot;</span><span class="opt">+</span><span class="kwd">fannkuch</span><span class="opt">(</span>n<span class="opt">));</span>
   <span class="opt">}</span>
<span class="opt">}</span>
